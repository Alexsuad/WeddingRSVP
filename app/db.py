# app/db.py

# =================================================================================
# üóÑÔ∏è CONFIGURACI√ìN Y CONEXI√ìN A LA BASE DE DATOS
# ---------------------------------------------------------------------------------
# Este m√≥dulo centraliza la configuraci√≥n de la conexi√≥n a la base de datos
# utilizando SQLAlchemy.
#
# Se implementa una l√≥gica para asegurar que todas las partes de la aplicaci√≥n
# (FastAPI, Streamlit, scripts) apunten a un √∫nico archivo de base de datos
# utilizando una ruta absoluta, evitando la creaci√≥n de bases de datos duplicadas.
# =================================================================================


# üêç Importaciones de M√≥dulos
# ---------------------------------------------------------------------------------
# `os`: Para interactuar con el sistema operativo, espec√≠ficamente para construir
#      rutas de archivos de manera robusta.
import os
# `create_engine`: La funci√≥n de SQLAlchemy para establecer la conexi√≥n con la BD.
from sqlalchemy import create_engine
# `sessionmaker`: Para crear "f√°bricas" de sesiones que gestionan las conversaciones
#                 con la base de datos.
# `declarative_base`: Para crear la clase Base de la que heredar√°n todos nuestros
#                     modelos ORM.
from sqlalchemy.orm import sessionmaker, declarative_base


# üìç L√ìGICA DE RUTA ABSOLUTA PARA LA BASE DE DATOS
# ---------------------------------------------------------------------------------
# Esta secci√≥n garantiza que siempre se use el mismo archivo `wedding.db`.

# Se intenta leer la URL de la base de datos desde una variable de entorno.
# Esto da flexibilidad para configurar una base de datos diferente (como PostgreSQL) en producci√≥n.
DATABASE_URL_ENV = os.getenv("DATABASE_URL")

# Si se encuentra una URL en las variables de entorno, se utiliza esa.
if DATABASE_URL_ENV:
    DATABASE_URL = DATABASE_URL_ENV
else:
    # Si no se encuentra, se construye una ruta absoluta al archivo `wedding.db`
    # que debe estar en la carpeta ra√≠z del proyecto.
    
    # 1. Se obtiene la ruta del directorio donde se encuentra este archivo (`app/`).
    current_dir = os.path.dirname(os.path.abspath(__file__))
    # 2. Se sube un nivel para llegar a la ra√≠z del proyecto (`backend_starter/`).
    project_root = os.path.abspath(os.path.join(current_dir, ".."))
    # 3. Se construye la ruta completa al archivo de la base de datos.
    db_path = os.path.join(project_root, "wedding.db")
    # 4. Se formatea la ruta en el formato de URL de conexi√≥n que SQLAlchemy espera para SQLite.
    #    `sqlite:///` indica una ruta de archivo absoluta.
    DATABASE_URL = f"sqlite:///{db_path}"


# üè≠ CREACI√ìN DEL MOTOR Y LA F√ÅBRICA DE SESIONES
# ---------------------------------------------------------------------------------

# Se crea el "motor" de SQLAlchemy, que es el punto de entrada a la base de datos.
# `connect_args={"check_same_thread": False}`: Es una configuraci√≥n espec√≠fica para
# SQLite que permite que sea utilizado por m√∫ltiples hilos, algo necesario para FastAPI.
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})

# Se crea una "f√°brica" de sesiones (`SessionLocal`). Cada vez que necesitemos hablar
# con la base de datos, pediremos una nueva sesi√≥n a esta f√°brica.
# `autocommit=False`, `autoflush=False`: Asegura que tengamos control manual sobre
# cu√°ndo se guardan los cambios.
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Se crea la clase `Base`. Todos nuestros modelos (como `Guest` y `Task`)
# heredar√°n de esta clase, permitiendo que SQLAlchemy los descubra y los mapee
# a tablas en la base de datos.
Base = declarative_base()



def get_db():                              # Define una dependencia para inyectar sesiones de BD por petici√≥n.
    db = SessionLocal()                    # Crea una nueva sesi√≥n ligada al engine configurado.
    try:                                   # Abre un bloque try para garantizar cierre correcto.
        yield db                           # Entrega la sesi√≥n al endpoint que la consuma.
    finally:                               # Al finalizar la petici√≥n...
        db.close()                         # Cierra la sesi√≥n para liberar conexiones/recursos.
