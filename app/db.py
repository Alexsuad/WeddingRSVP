# app/db.py                                                                                   # Indica la ruta y nombre del archivo (informativo para el lector).

# =================================================================================            # Separador visual de secci√≥n.
# üóÑÔ∏è CONFIGURACI√ìN Y CONEXI√ìN A LA BASE DE DATOS                                              # T√≠tulo explicativo de la secci√≥n.
# ---------------------------------------------------------------------------------            # L√≠nea de separaci√≥n.
# Este m√≥dulo centraliza la configuraci√≥n de la conexi√≥n a la base de datos                    # Explica el prop√≥sito del m√≥dulo.
# utilizando SQLAlchemy.                                                                       # Contin√∫a la explicaci√≥n.
#                                                                                              # L√≠nea en blanco intencional.
# Se implementa una l√≥gica para asegurar que todas las partes de la aplicaci√≥n                 # Describe la l√≥gica de ruta absoluta.
# (FastAPI, Streamlit, scripts) apunten a un √∫nico archivo de base de datos                    # Aclara qu√© componentes se benefician.
# utilizando una ruta absoluta, evitando la creaci√≥n de bases de datos duplicadas.             # Beneficio de la ruta absoluta.
# =================================================================================            # Fin del encabezado.

# üêç Importaciones de M√≥dulos                                                                  # T√≠tulo de secci√≥n de imports.
# ---------------------------------------------------------------------------------            # Separador de secci√≥n.
import os                                                                                      # `os`: para leer variables de entorno y construir rutas absolutas.
from sqlalchemy import create_engine                                                           # `create_engine`: crea el motor de conexi√≥n a la BD.
from sqlalchemy.orm import sessionmaker, declarative_base                                      # `sessionmaker`: fabrica sesiones; `declarative_base`: base ORM.
from loguru import logger                                                                      # ‚úÖ Importa logger para escribir trazas (a√±adido para loguear la BD).

# üìç L√ìGICA DE RUTA ABSOLUTA PARA LA BASE DE DATOS                                             # T√≠tulo de secci√≥n de configuraci√≥n de URL.
# ---------------------------------------------------------------------------------            # Separador de secci√≥n.
DATABASE_URL_ENV = os.getenv("DATABASE_URL")                                                   # Lee la URL de BD desde variables de entorno (si existe).

if DATABASE_URL_ENV:                                                                           # Si la variable de entorno est√° definida...
    DATABASE_URL = DATABASE_URL_ENV                                                            # ...√∫sala directamente como cadena de conexi√≥n.
else:                                                                                          # De lo contrario (no hay env)...
    current_dir = os.path.dirname(os.path.abspath(__file__))                                   # 1) Obtiene la ruta absoluta del directorio de este archivo.
    project_root = os.path.abspath(os.path.join(current_dir, ".."))                            # 2) Sube un nivel para llegar a la ra√≠z del proyecto.
    db_path = os.path.join(project_root, "wedding.db")                                         # 3) Construye la ruta absoluta del archivo SQLite `wedding.db`.
    DATABASE_URL = f"sqlite:///{db_path}"                                                      # 4) Formatea la URL SQLAlchemy para ruta absoluta en SQLite.

# üè≠ CREACI√ìN DEL MOTOR Y LA F√ÅBRICA DE SESIONES                                               # T√≠tulo de secci√≥n de engine y sesi√≥n.
# ---------------------------------------------------------------------------------            # Separador de secci√≥n.
engine = create_engine(                                                                        # Crea el motor de SQLAlchemy contra la URL resuelta.
    DATABASE_URL,                                                                              # Pasa la URL de la base de datos (absoluta o de entorno).
    connect_args={"check_same_thread": False}                                                  # Para SQLite: permite acceso multi-hilo (requerido por FastAPI).
)                                                                                              # Cierra la creaci√≥n del engine.

SessionLocal = sessionmaker(                                                                   # Crea la f√°brica de sesiones asociada al engine.
    autocommit=False,                                                                          # Desactiva autocommit: control manual de commits.
    autoflush=False,                                                                           # Desactiva autoflush: evita flush impl√≠citos inesperados.
    bind=engine                                                                                # Asocia la sesi√≥n al engine configurado.
)                                                                                              # Cierra la creaci√≥n de la f√°brica de sesiones.

Base = declarative_base()                                                                       # Crea la clase base del ORM para modelos (mapear tablas).

def get_db():                                                                                  # Define una dependencia para inyectar sesiones por petici√≥n.
    db = SessionLocal()                                                                         # Crea una nueva sesi√≥n ligada al engine.
    try:                                                                                        # Bloque try/finally para asegurar el cierre de la sesi√≥n.
        yield db                                                                                # Entrega la sesi√≥n al c√≥digo que la consuma (endpoint/servicio).
    finally:                                                                                    # Al finalizar el uso de la sesi√≥n...
        db.close()                                                                              # ...cierra la sesi√≥n liberando recursos/conexiones.

# =================================================================================            # Separador de nueva secci√≥n a√±adida.
# üîé UTILIDAD: LOGUEAR LA RUTA REAL DE LA BASE DE DATOS EN STARTUP                             # T√≠tulo claro de la utilidad de diagn√≥stico.
# ---------------------------------------------------------------------------------            # Separador de secci√≥n.
def log_db_path_on_startup() -> None:                                                          # Define una funci√≥n que imprime la BD en uso al arrancar.
    try:                                                                                       # Protege el log para no impedir el arranque por errores.
        url = engine.url                                                                        # Obtiene el objeto URL del engine (describe la conexi√≥n actual).
        db_file = getattr(url, "database", None)                                                # Extrae la ruta del archivo f√≠sico (solo aplica a SQLite).
        abs_path = os.path.abspath(db_file) if db_file else "<memory/other>"                    # Resuelve a ruta absoluta (o marca si no hay archivo).
        logger.info("DB in use ‚Üí {} (abs={})", db_file, abs_path)                               # Escribe en logs la ruta cruda y la absoluta (diagn√≥stico).
    except Exception as e:                                                                      # Si ocurre cualquier excepci√≥n durante el proceso...
        logger.warning("No pude resolver la ruta de la BD: {}", e)                              # ...lo reporta como warning sin romper el servicio.
