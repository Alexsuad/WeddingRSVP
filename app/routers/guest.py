# app/routers/guest.py  # Ruta del archivo que define el router de endpoints del invitado.                   # Comentario: indica la ubicaci√≥n del m√≥dulo.

# =================================================================================                                                                # Separador visual de secci√≥n.
# üë§ Router: Endpoints del Invitado (perfil y RSVP)                                                                                                 # T√≠tulo descriptivo del m√≥dulo.
# ---------------------------------------------------------------------------------                                                                 # Separador.
# Este m√≥dulo expone las rutas PROTEGIDAS (requieren JWT) para:                                                                                     # Explicaci√≥n del prop√≥sito.
# - Obtener el perfil del invitado autenticado (/me).                                                                                               # Lista de endpoints.
# - Actualizar la confirmaci√≥n de asistencia (RSVP) del invitado (/me/rsvp).                                                                        # Lista de endpoints.
# =================================================================================                                                                # Fin encabezado.

# üêç Importaciones est√°ndar y de terceros                                                                                                          # Secci√≥n de importaciones.
# ---------------------------------------------------------------------------------                                                                 # Separador.
from datetime import datetime  # Para sellos de tiempo en confirmaciones y validaciones.                                                           # Import: datetime para tiempos.
from typing import Optional    # Para anotar tipos opcionales en dependencias/helpers.                                                             # Import: Optional para tipado.
import os                      # Para leer variables de entorno (RSVP_DEADLINE).                                                                   # Import: os para env.
from loguru import logger      # Logger para observabilidad de errores                                                                            # Import: loguru logger.

from fastapi import APIRouter, Depends, HTTPException, status  # API Router y utilidades de FastAPI.                                               # Import: FastAPI core.
from fastapi.security import OAuth2PasswordBearer              # Esquema Bearer para extraer el token.                                            # Import: OAuth2 bearer.
from sqlalchemy.orm import Session                             # Sesi√≥n de SQLAlchemy para acceso a BD.                                           # Import: Session ORM.

# üß© Importaciones internas del proyecto                                                                                                           # Secci√≥n de imports internos.
# ---------------------------------------------------------------------------------                                                                 # Separador.
from app.db import SessionLocal                # F√°brica de sesiones de BD.                                                                        # Import: SessionLocal.
from app import models, schemas, auth, mailer  # Modelos ORM, Schemas Pydantic, utilidades de autenticaci√≥n y mailer.                           # Import: modelos, schemas, auth, mailer.
from app.models import InviteTypeEnum          # Enum para diferenciar ceremonia vs ceremonia+recepci√≥n.                                          # Import: enum de invitaci√≥n.

# üßç‚Äç‚ôÇÔ∏è Helper para enmascarar correos electr√≥nicos                                                                                                  # Helper: enmascarar email.
# ---------------------------------------------------------------------------------                                                                 # Separador.
def _mask_email(addr: str | None) -> str:      # Funci√≥n para enmascarar emails en logs.                                                          # Define _mask_email.
    if not addr:                               # Si no hay email, retorna placeholder.                                                            # Caso None.
        return "<no-email>"                    # Placeholder para email ausente.                                                                  # Retorno placeholder.
    addr = addr.strip()                        # Limpia espacios en blanco.                                                                       # Limpia string.
    if "@" not in addr or len(addr) < 3:       # Si no tiene @ o es muy corto, enmascara parcialmente.                                            # Validaci√≥n formato.
        return addr[:2] + "***"                # Enmascara con asteriscos.                                                                        # Retorno enmascarado.
    name, dom = addr.split("@", 1)             # Divide en nombre y dominio.                                                                       # Split email.
    return (name[:2] + "***@" + dom)           # Retorna nombre parcialmente enmascarado + dominio.                                                # Retorno final.

# üß≠ Configuraci√≥n del router                                                                                                                                                     
# ---------------------------------------------------------------------------------                                                                 # Separador.
router = APIRouter(                            # Crea un router modular de FastAPI.                                                               # Construcci√≥n del router.
    prefix="/api/guest",                       # Prefijo com√∫n para todas las rutas de este archivo.                                              # Prefijo /api/guest.
    tags=["guest"],                            # Etiqueta para agrupar rutas en la documentaci√≥n /docs.                                            # Tag 'guest'.
)                                              # Cierra la construcci√≥n del router.                                                                # Fin router.

# üîê Esquema OAuth2 para extraer el token Bearer en /docs                                                                                         # Secci√≥n de seguridad.
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/login")  # El login real es JSON en /api/login.                                               # Esquema bearer para Swagger.

# üõ†Ô∏è Dependencias comunes                                                                                                                                                           
# ---------------------------------------------------------------------------------                                                                 # Separador.
def get_db() -> Session:                       # Dependencia que entrega una sesi√≥n de BD por request.                                            # Define get_db.
    db = SessionLocal()                        # Crea una nueva sesi√≥n de SQLAlchemy.                                                             # Instancia sesi√≥n.
    try:                                       # Garantiza cierre con try/finalmente.                                                             # Bloque try.
        yield db                               # Entrega la sesi√≥n a la ruta que la requiera.                                                     # Yield sesi√≥n.
    finally:                                   # Al finalizar la request (√©xito o error)...                                                        # Bloque finally.
        db.close()                             # Cierra la sesi√≥n y libera recursos.                                                              # Cierra sesi√≥n.

def get_current_guest(                         # Dependencia para autenticar y obtener al invitado actual.                                        # Define get_current_guest.
    token: str = Depends(oauth2_scheme),       # Extrae el token Bearer del encabezado Authorization.                                             # Dependencia: token.
    db: Session = Depends(get_db),             # Inyecta una sesi√≥n de BD.                                                                        # Dependencia: db sesi√≥n.
) -> models.Guest:                             # Devuelve una instancia ORM de Guest.                                                             # Tipo de retorno ORM.
    credentials_exception = HTTPException(     # Excepci√≥n est√°ndar de credenciales inv√°lidas.                                                    # Prepara excepci√≥n 401.
        status_code=status.HTTP_401_UNAUTHORIZED,  # HTTP 401 (no autorizado).                                                                    # C√≥digo 401.
        detail="No se pudieron validar las credenciales",  # Mensaje gen√©rico.                                                                   # Mensaje error.
        headers={"WWW-Authenticate": "Bearer"},            # Indica esquema esperado.                                                             # Cabecera WWW-Authenticate.
    )                                         # Cierra construcci√≥n de la excepci√≥n.                                                               # Fin excepci√≥n.

    payload = auth.verify_access_token(token)  # Verifica el JWT y devuelve payload o None.                                                       # Verifica token.
    if payload is None:                        # Si el token es inv√°lido o expir√≥...                                                              # Condici√≥n sin payload.
        raise credentials_exception            # Lanza 401.                                                                                       # Lanza excepci√≥n.

    guest_code = payload.get("sub")            # Extrae el claim 'sub' (guest_code).                                                              # Lee 'sub'.
    if not guest_code:                         # Si no existe el claim esperado...                                                                 # Validaci√≥n 'sub'.
        raise credentials_exception            # Lanza 401.                                                                                       # Excepci√≥n.

    guest = db.query(models.Guest).filter(     # Busca en la BD al invitado correspondiente.                                                      # Query ORM.
        models.Guest.guest_code == guest_code  # Filtro por guest_code.                                                                           # Filtro igualdad.
    ).first()                                  # Toma el primer resultado.                                                                         # Obtiene 1 fila.
    if not guest:                              # Si no se encuentra el invitado...                                                                # Comprobaci√≥n None.
        raise credentials_exception            # Lanza 401.                                                                                       # Excepci√≥n.

    return guest                               # Devuelve el invitado autenticado.                                                                # Retorno ORM.

# =================================================================================                                                                 # Separador.
# üìÑ GET /api/guest/me ‚Äî Perfil del invitado autenticado                                                                                           # Secci√≥n endpoint GET /me.
# ---------------------------------------------------------------------------------                                                                 # Separador.
@router.get("/me", response_model=schemas.GuestWithCompanionsResponse)  # Define ruta GET con response_model tipado.                               # Decorador FastAPI.
def get_my_profile(                            # Endpoint: devuelve el perfil del invitado.                                                       # Define funci√≥n handler.
    current_guest: models.Guest = Depends(get_current_guest),  # Invitado autenticado.                                                            # Dependencia invitado actual.
):                                             # Cierra firma de la funci√≥n.                                                                      # Fin firma.
    # --- Campos calculados para UI (no alteran el modelo en BD) ---                                                                             # Bloque de campos derivados.
    is_full_invite: bool = (current_guest.invite_type == InviteTypeEnum.full)  # True si la invitaci√≥n es 'full' (Ceremonia + Recepci√≥n).       # Calcula booleano.
    invite_scope_label: str = "ceremony+reception" if is_full_invite else "reception-only"  # Etiqueta can√≥nica para UI seg√∫n el booleano.       # Define etiqueta.

    # --- Construcci√≥n de la respuesta con los campos extra ---                                                                                   # Bloque de respuesta tipada.
    resp = schemas.GuestWithCompanionsResponse.model_validate(current_guest)  # Transforma ORM ‚Üí schema respetando from_attributes.               # Model validate.
    resp.invited_to_ceremony = is_full_invite                                  # Inserta el booleano calculado en el schema de salida.            # Set campo 1.
    resp.invite_scope = invite_scope_label                                     # Inserta la etiqueta calculada en el schema de salida.            # Set campo 2.
    return resp                                                                 # Devuelve el schema extendido (incluye companions).               # Return final.

# =================================================================================                                                                 # Separador.
# üìù POST /api/guest/me/rsvp ‚Äî Actualizar confirmaci√≥n de asistencia                                                                                 # Secci√≥n endpoint POST /me/rsvp.
# ---------------------------------------------------------------------------------                                                                 # Separador.
@router.post("/me/rsvp", response_model=schemas.GuestWithCompanionsResponse)  # Define ruta POST con response_model tipado.                        # Decorador FastAPI.
def update_my_rsvp(                            # Endpoint: actualiza la confirmaci√≥n de asistencia.                                               # Define funci√≥n handler.
    payload: schemas.RSVPUpdateRequest,        # Datos recibidos del cliente (attending, companions...).                                          # Body payload tipado.
    db: Session = Depends(get_db),             # Sesi√≥n de BD.                                                                                    # Dependencia DB.
    current_guest: models.Guest = Depends(get_current_guest),  # Invitado autenticado.                                                            # Dependencia invitado.
):                                             # Cierra firma de la funci√≥n.                                                                      # Fin firma.
    # ‚è≥ 1) Validar fecha l√≠mite de RSVP desde variables de entorno.                                                                              # Paso 1: validar deadline.
    deadline_str = os.getenv("RSVP_DEADLINE", "2026-01-20")  # Lee la fecha l√≠mite (ISO) con un valor por defecto seguro.                        # Lee env.
    try:                                                     # Intenta parsear la fecha en formato ISO.                                           # Try parse.
        deadline = datetime.fromisoformat(deadline_str)      # Convierte la cadena ISO a datetime naive.                                          # Parse ISO.
    except Exception:                                        # Si el formato es inv√°lido o falla el parseo...                                     # Except parse.
        deadline = datetime.fromisoformat("2099-12-31")      # Usa una fecha futura para no bloquear por error de configuraci√≥n.                  # Fallback fecha.

    if datetime.utcnow() > deadline:                         # Compara hora actual UTC vs fecha l√≠mite.                                           # Comparaci√≥n tiempo.
        raise HTTPException(                                 # Si ya pas√≥, rechaza la operaci√≥n con 400.                                          # Lanza 400.
            status_code=status.HTTP_400_BAD_REQUEST,         # C√≥digo 400 (bad request).                                                          # C√≥digo HTTP.
            detail="La fecha l√≠mite para confirmar la asistencia ya ha pasado.",  # Mensaje claro para el cliente.                               # Mensaje.
        )                                                    # Cierra la excepci√≥n.                                                                # Fin raise.

    # üö´ 2) Si el invitado NO asistir√°, limpiar datos dependientes.
    if not payload.attending:
        current_guest.confirmed = False
        current_guest.confirmed_at = datetime.utcnow()
        current_guest.menu_choice = None
        current_guest.allergies = None
        current_guest.needs_accommodation = bool(payload.needs_accommodation)
        current_guest.needs_transport = bool(payload.needs_transport)
        current_guest.companions.clear()
        current_guest.num_adults = 0
        current_guest.num_children = 0
        # ‚úÖ NUEVO: guardar notas (aunque no asista)
        current_guest.notes = (payload.notes or None)

        db.commit()
        db.refresh(current_guest)

        logger.info(
            "RSVP: declinado | guest_id=%s | code=%s | email=%s",
            current_guest.id, current_guest.guest_code, _mask_email(current_guest.email)
        )

        try:
            if current_guest.email:
                summary = {
                    "guest_name": current_guest.full_name or "",
                    "invite_scope": "ceremony+reception" if current_guest.invite_type == InviteTypeEnum.full else "reception-only",
                    "attending": False,
                    "companions": [],  # al declinar, no hay acompa√±antes
                    "allergies": "",
                    "notes": None,
                }
                ok = mailer.send_confirmation_email(
                    to_email=current_guest.email,
                    language=(current_guest.language.value if current_guest.language else "en"),
                    summary=summary,
                )
                if ok:
                    logger.info("RSVP: email de confirmaci√≥n ENVIADO | guest_id=%s | email=%s",
                                current_guest.id, _mask_email(current_guest.email))
                else:
                    logger.error("RSVP: email de confirmaci√≥n FALL√ì (ret False) | guest_id=%s | email=%s",
                                 current_guest.id, _mask_email(current_guest.email))
        except Exception as e:
            logger.error("RSVP: error enviando email de confirmaci√≥n (declin√≥) | guest_id=%s | err=%s",
                         current_guest.id, e)

        # --- Construir respuesta con campos calculados, igual que en /me ---
        is_full_invite: bool = (current_guest.invite_type == InviteTypeEnum.full)
        invite_scope_label: str = "ceremony+reception" if is_full_invite else "reception-only"
        resp = schemas.GuestWithCompanionsResponse.model_validate(current_guest)
        resp.invited_to_ceremony = is_full_invite
        resp.invite_scope = invite_scope_label
        return resp

    # ‚úÖ 3) Si asistir√°, validar reglas de negocio.                                                                                              # Paso 3: validaciones.
    if len(payload.companions) > (current_guest.max_accomp or 0):  # Verifica que no supere el m√°ximo permitido de acompa√±antes.                 # Regla de cupo.
        raise HTTPException(status_code=400, detail="Has superado el n√∫mero m√°ximo de acompa√±antes permitido.")  # Error claro.                # Lanza 400.

    requires_menu = (current_guest.invite_type == InviteTypeEnum.full)  # El men√∫ del titular solo aplica si invitaci√≥n es FULL.                # Flag men√∫.
    if requires_menu and not (payload.menu_choice and payload.menu_choice.strip()):  # Si requiere men√∫ pero no se envi√≥ uno v√°lido...           # Validaci√≥n men√∫.
        raise HTTPException(status_code=400, detail="Debes escoger un men√∫ para el titular.")  # Error si falta men√∫.                           # Lanza 400.

    # üë™ 4) Calcular totales de adultos y ni√±os.                                                                                                 # Paso 4: conteo.
    titular_adult = 1                                               # El titular cuenta como un adulto.                                            # Titular = 1 adulto.
    adults = titular_adult + sum(1 for c in payload.companions if not c.is_child)  # Adultos = titular + acompa√±antes adultos.                   # Calcula adultos.
    children = sum(1 for c in payload.companions if c.is_child)    # Ni√±os = suma de acompa√±antes marcados como ni√±o.                             # Calcula ni√±os.

    # üìù 5) Persistir datos del titular.                                                                                                          # Paso 5: persistir titular.
    current_guest.confirmed = True                                  # Marca confirmaci√≥n como True.                                                # Confirma asistencia.
    current_guest.confirmed_at = datetime.utcnow()                  # Sella tiempo de confirmaci√≥n.                                                # Timestamp.
    current_guest.menu_choice = (payload.menu_choice or None) if requires_menu else None  # Guarda men√∫ si aplica; si no, None.                  # Guarda men√∫.
    current_guest.allergies = (payload.allergies or None)           # Guarda alergias (o None si vac√≠o).                                           # Guarda alergias.
    current_guest.needs_accommodation = bool(payload.needs_accommodation)  # Guarda necesidad de alojamiento.                                     # Guarda alojamiento.
    current_guest.needs_transport = bool(payload.needs_transport)          # Guarda necesidad de transporte.                                      # Guarda transporte.
    # ‚úÖ NUEVO: guardar notas del titular
    current_guest.notes = (payload.notes or None)

    # üîÅ 6) Reemplazar la lista de acompa√±antes.                                                                                                  # Paso 6: companions.
    current_guest.companions.clear()                                # Limpia la lista existente para reemplazarla.                                 # Limpia lista.
    for c in payload.companions:                                    # Itera por cada acompa√±ante recibido en el payload.                          # Loop companions.
        current_guest.companions.append(                            # Agrega un nuevo registro Companion al invitado actual.                      # Append companion.
            models.Companion(                                       # Instancia el modelo Companion.                                               # Construye modelo.
                guest_id=current_guest.id,                          # Relaciona el companion con el invitado actual.                               # FK guest_id.
                name=c.name.strip(),                                # Guarda nombre del acompa√±ante (sin espacios extra).                          # Nombre limpio.
                is_child=bool(c.is_child),                          # Guarda si es ni√±o/ni√±a.                                                       # Flag ni√±o.
                menu_choice=(c.menu_choice or None) if requires_menu else None,  # Men√∫ del acompa√±ante si aplica; si no, None.                   # Men√∫ acomp.
                allergies=(c.allergies or None),                    # Alergias del acompa√±ante (o None si vac√≠o).                                  # Alergias acomp.
            )
        )

    # üî¢ 7) Actualizar contadores y guardar cambios.                                                                                              # Paso 7: contadores + commit.
    current_guest.num_adults = adults                                # Actualiza el total de adultos.                                              # Set adultos.
    current_guest.num_children = children                            # Actualiza el total de ni√±os.                                                # Set ni√±os.
    db.commit()                                                      # Persiste todos los cambios (titular + acompa√±antes + contadores).           # Commit BD.
    db.refresh(current_guest)                                        # Refresca el objeto ORM con datos confirmados.                               # Refresh ORM.

    logger.info(
        "RSVP: confirmado | guest_id=%s | code=%s | email=%s | adults=%s | children=%s",
        current_guest.id, current_guest.guest_code, _mask_email(current_guest.email),
        current_guest.num_adults, current_guest.num_children
    )

    try:
        if current_guest.email:
            summary = {
                "guest_name": current_guest.full_name or "",
                "invite_scope": "ceremony+reception" if current_guest.invite_type == InviteTypeEnum.full else "reception-only",
                "attending": True,
                "companions": [
                    {"name": c.name or "", "label": ("child" if c.is_child else "adult"), "allergens": c.allergies or ""}
                    for c in (current_guest.companions or [])
                ],
                "allergies": current_guest.allergies or "",
                "notes": (current_guest.notes or None),
            }
            ok = mailer.send_confirmation_email(
                to_email=current_guest.email,
                language=(current_guest.language.value if current_guest.language else "en"),
                summary=summary,
            )
            if ok:
                logger.info("RSVP: email de confirmaci√≥n ENVIADO | guest_id=%s | email=%s",
                            current_guest.id, _mask_email(current_guest.email))
            else:
                logger.error("RSVP: email de confirmaci√≥n FALL√ì (ret False) | guest_id=%s | email=%s",
                             current_guest.id, _mask_email(current_guest.email))
    except Exception as e:
        logger.error("RSVP: error enviando email de confirmaci√≥n (asiste) | guest_id=%s | err=%s",
                     current_guest.id, e)

    # --- Construir respuesta con campos calculados, igual que en /me ---                                                                         # Respuesta consistente.
    is_full_invite: bool = (current_guest.invite_type == InviteTypeEnum.full)          # Recalcula si la invitaci√≥n es 'full'.                  # Booleano invitaci√≥n.
    invite_scope_label: str = "ceremony+reception" if is_full_invite else "reception-only"  # Etiqueta can√≥nica.                                 # Etiqueta alcance.
    resp = schemas.GuestWithCompanionsResponse.model_validate(current_guest)           # Transforma ORM ‚Üí schema.                               # Model validate.
    resp.invited_to_ceremony = is_full_invite                                          # Inserta booleano calculado.                            # Set campo 1.
    resp.invite_scope = invite_scope_label                                             # Inserta etiqueta calculada.                            # Set campo 2.
    return resp                                                                         # Devuelve schema coherente.                             # Return final.